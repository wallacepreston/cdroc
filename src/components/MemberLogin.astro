---
interface Props {
  redirectTo?: string;
}

const { redirectTo } = Astro.props;
---

<div class="login-container">
  <form id="loginForm" class="login-form">
    <h2>Members Only Area</h2>
    <div class="form-group">
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required />
    </div>
    <div class="form-group">
      <label for="passcode">Member Passcode:</label>
      <input type="password" id="passcode" name="passcode" required />
    </div>
    <button type="submit">Login</button>
    <p id="errorMessage" class="error-message"></p>
  </form>
</div>

<script define:vars={{ redirectTo }}>
  const currentPath = redirectTo || window.location.pathname;
  console.log('Current path:', currentPath);
  
  const form = document.getElementById('loginForm');
  const errorMessage = document.getElementById('errorMessage');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorMessage.textContent = '';
    const email = document.getElementById('email').value;
    const passcode = document.getElementById('passcode').value;

    try {
      const res = await fetch('https://acrooc.com/wp-json/wp/v2/posts?per_page=100');
      const data = await res.json();
      
      const member = data.find(post => {
        return post.acf?.email === email && post.acf?.member_passcode === passcode;
      });
      console.log('Found member:', member ? 'yes' : 'no');

      if (member) {
        console.log('Login successful');
        localStorage.setItem('member_logged_in', 'true');
        window.location.reload(); // Reload instead of redirect
      } else {
        errorMessage.textContent = 'Invalid email or passcode';
      }
    } catch (error) {
      console.error('Login error:', error);
      errorMessage.textContent = 'Error verifying credentials';
    }
  });
</script>

<style>
  .login-container {
    max-width: 400px;
    margin: 2rem auto;
    padding: 2rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .login-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  input {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  button {
    padding: 0.5rem;
    background: #494949;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .error-message {
    color: red;
    font-size: 0.9rem;
  }
</style> 